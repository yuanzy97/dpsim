<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DPsim â€“ Getting Started</title><link>https://sogno-platform.github.io/dpsim/docs/getting-started/</link><description>Recent content in Getting Started on DPsim</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://sogno-platform.github.io/dpsim/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Build</title><link>https://sogno-platform.github.io/dpsim/docs/getting-started/build/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://sogno-platform.github.io/dpsim/docs/getting-started/build/</guid><description>
&lt;h2 id="docker-based">Docker based&lt;/h2>
&lt;p>Clone the repository&lt;/p>
&lt;pre>&lt;code>$ git clone git@github.com:sogno-platform/dpsim.git
&lt;/code>&lt;/pre>
&lt;p>or using https if you do not have an account&lt;/p>
&lt;pre>&lt;code>$ git clone https://github.com/sogno-platform/dpsim.git
&lt;/code>&lt;/pre>
&lt;p>In the repository, there is a Docker file with all required dependencies&lt;/p>
&lt;pre>&lt;code>$ cd dpsim
$ docker build -t sogno/dpsim:dev -f Packaging/Docker/Dockerfile.dev .
&lt;/code>&lt;/pre>
&lt;p>Alternatively, the image can be pulled from DockerHub like so&lt;/p>
&lt;pre>&lt;code>$ docker pull sogno/dpsim:dev
&lt;/code>&lt;/pre>
&lt;p>For OS specific instructions on how to install requirements, see the sections below.&lt;/p>
&lt;p>Next, run a Docker container&lt;/p>
&lt;pre>&lt;code>$ cd dpsim
$ docker run -it -p 8888:8888 -v $(pwd):/dpsim --privileged sogno/dpsim:dev bash
&lt;/code>&lt;/pre>
&lt;p>The option &lt;code>-p&lt;/code> maps the port 8888 of the container to the docker host. This is required to access the jupyter lab instance inside the container. The option &lt;code>--privileged&lt;/code> is required for debug builds.&lt;/p>
&lt;p>For Windows, you might need to specify the current directory with curly brackets&lt;/p>
&lt;pre>&lt;code>$ docker run -it -p 8888:8888 -v ${pwd}:/dpsim --privileged sogno/dpsim:dev bash
&lt;/code>&lt;/pre>
&lt;p>Now, you should be in an interactive session inside the docker container.&lt;/p>
&lt;p>The DPsim C++ and Python library without C++ examples or documentation can be built as follows&lt;/p>
&lt;pre>&lt;code>$ cd /dpsim
$ mkdir build &amp;amp;&amp;amp; cd build
$ cmake ..
$ cmake --build . --target dpsimpy
&lt;/code>&lt;/pre>
&lt;p>To build everything run&lt;/p>
&lt;pre>&lt;code>$ cmake --build .
&lt;/code>&lt;/pre>
&lt;p>If you would like to use the Python package, it has to be added to the path.
The following command adds the dpsimpy C++/Python package as well as the dpsim pure Python package.&lt;/p>
&lt;pre>&lt;code>$ cd /dpsim/build
$ export PYTHONPATH=$(pwd):$(pwd)/../python/src/
&lt;/code>&lt;/pre>
&lt;p>To run jupyter lab&lt;/p>
&lt;pre>&lt;code>$ cd /dpsim
$ jupyter lab --ip=&amp;quot;0.0.0.0&amp;quot; --allow-root --no-browser
&lt;/code>&lt;/pre>
&lt;p>To install dpsim run&lt;/p>
&lt;pre>&lt;code>$ cd /dpsim/build
$ sudo make install
&lt;/code>&lt;/pre>
&lt;h2 id="cmake-for-linux">CMake for Linux&lt;/h2>
&lt;p>The most recent list of requirements can be found in the Dockerfiles.&lt;/p>
&lt;p>Make sure that the required dependencies are installed.
The &lt;a href="https://git.rwth-aachen.de/acs/public/simulation/dpsim/dpsim/-/blob/master/Packaging/install-fedora-deps.sh">fedora installation script&lt;/a> in the DPsim repository is a good place to start from.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> There are currently no Debian packages for &lt;code>villas-node&lt;/code> and &lt;code>libcimpp16v29a&lt;/code>.
If you want to use these optional feature, you have to build them manually.&lt;/p>
&lt;p>Install Sundials&lt;/p>
&lt;pre>&lt;code>$ git clone --branch v3.1.1 https://github.com/LLNL/sundials.git
$ mkdir sundials/build
$ pushd sundials/build
$ cmake .. \
-DBUILD_SHARED_LIBS=ON \
-DBUILD_STATIC_LIBS=OFF \
-DEXAMPLES_ENABLE_C=OFF
$ make -j$(nproc) install
$ popd
&lt;/code>&lt;/pre>
&lt;p>The following steps to clone, build and install are the same as for the Docker setup.&lt;/p>
&lt;h2 id="cmake-for-windows">CMake for Windows&lt;/h2>
&lt;p>Make sure that the required dependecies are installed:&lt;/p>
&lt;ul>
&lt;li>Visual Studio 2017 with C++ Desktop development package&lt;/li>
&lt;li>&lt;a href="https://cmake.org/">CMake&lt;/a> for Windows&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/download/win">Git for Windows&lt;/a>&lt;/li>
&lt;li>For Python support, install Python3, for example, Anaconda, and add Python to your PATH.&lt;/li>
&lt;/ul>
&lt;p>Clone the project as explained for Docker.&lt;/p>
&lt;p>Open a windows command prompt and navigate into the new DPsim folder.
Generate a Visual Studio project with CMake and use it to build the project&lt;/p>
&lt;pre>&lt;code>$ mkdir build
$ cd build
$ cmake -G &amp;quot;Visual Studio 15 2017 Win64&amp;quot; ..
&lt;/code>&lt;/pre>
&lt;p>Open Visual Studio and load the Visual Studio project from the build directory within the DPsim folder.&lt;/p>
&lt;p>You can either build the project from within Visual Studio or from the command line by running the following command in the windows command prompt&lt;/p>
&lt;pre>&lt;code>$ cmake --build .
&lt;/code>&lt;/pre>
&lt;p>To install the Python package use Visual Studio and the Release configuration to build the DPsim Python module and then build the INSTALL project.&lt;/p>
&lt;h2 id="cmake-for-macos">CMake for macOS&lt;/h2>
&lt;p>Make sure that the required dependecies are installed&lt;/p>
&lt;pre>&lt;code>$ /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew install gcc9 git cmake graphviz python3 gsl eigen spdlog
$ sudo pip3 install numpy
&lt;/code>&lt;/pre>
&lt;p>Clone the source as explained for the Docker setup.&lt;/p>
&lt;p>Compile&lt;/p>
&lt;pre>&lt;code>$ mkdir build
$ cmake ..
$ make -j$(sysctl -n hw.ncpu)
&lt;/code>&lt;/pre>
&lt;p>To install the generated Python module to your system&lt;/p>
&lt;pre>&lt;code>$ sudo make install
&lt;/code>&lt;/pre>
&lt;h2 id="python-package-for-pypi">Python Package for pypi&lt;/h2>
&lt;p>Follow the previous steps to set up the Docker container.&lt;/p>
&lt;p>To build the Python package run&lt;/p>
&lt;pre>&lt;code>$ python3 setup.py bdist_wheel
&lt;/code>&lt;/pre>
&lt;h2 id="documentation">Documentation&lt;/h2>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>Install &lt;a href="https://www.sphinx-doc.org/en/master/">Sphinx&lt;/a> or use the Docker image.&lt;/p>
&lt;p>Generate the Python documentation by running Sphinx via CMake:&lt;/p>
&lt;pre>&lt;code>$ mkdir -p build &amp;amp;&amp;amp; cd build
$ cmake ..
$ make docs
&lt;/code>&lt;/pre>
&lt;p>The resulting documentation will be generated in &lt;code>Documentation/html/&lt;/code>.&lt;/p>
&lt;h3 id="c">C++&lt;/h3>
&lt;p>Install &lt;a href="http://www.doxygen.nl/">Doxygen&lt;/a> or use the Docker image.&lt;/p>
&lt;p>Generate the C++ documentation by running Doxygen via CMake:&lt;/p>
&lt;pre>&lt;code>$ mkdir -p build &amp;amp;&amp;amp; cd build
$ cmake ..
$ make docs_cxx
&lt;/code>&lt;/pre>
&lt;p>The resulting documentation will be generated in &lt;code>Documentation/html/Cxx&lt;/code>.&lt;/p></description></item><item><title>Docs: Install</title><link>https://sogno-platform.github.io/dpsim/docs/getting-started/install/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://sogno-platform.github.io/dpsim/docs/getting-started/install/</guid><description>
&lt;p>DPsim is a Python module / C++ library for complex power system
simulation. As a Python module, the easiest way to get to know DPsim is
via &lt;a href="https://jupyter-notebook-beginner-guide.readthedocs.io/en/latest/">Jupyter Notebooks&lt;/a>.&lt;/p>
&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>First, you need to install &lt;a href="https://docs.docker.com/install/">Docker&lt;/a>.
Then, you could either build a docker image by yourself as described in the build instructions or download a prepared image from Docker Hub as described in the following.&lt;/p>
&lt;p>To start a Jupyter session, run a DPsim Docker container&lt;/p>
&lt;pre>&lt;code> $ docker run -p 8888:8888 sogno/dpsim
&lt;/code>&lt;/pre>
&lt;p>And access the session by opening the following link: http://localhost:8888/lab?token=3adaa57df44cea75e60c0169e1b2a98ae8f7de130481b5bc&lt;/p>
&lt;h2 id="python">Python&lt;/h2>
&lt;p>&lt;strong>Currently, the pypi packages are not maintained. Until we have updated the packages, please use the docker installation.&lt;/strong>&lt;/p>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>First, you need to make sure that Python is installed and your version is compatible.
An easy way to install Python and all required packages is the &lt;a href="https://www.anaconda.com/">Anaconda distribution&lt;/a>.
To get started, install the latest installer for Python 3.x from the &lt;a href="https://www.anaconda.com/download/">downloads section&lt;/a>.
Then, run the Anaconda Prompt and create a new conda environment:&lt;/p>
&lt;pre>&lt;code>$ conda create -n dpsim python=3.6
&lt;/code>&lt;/pre>
&lt;p>After creating the environment you need to make sure that it is activated.
The current environment is displayed at the beginning of the command line in brackets.
It should read &lt;em>&amp;quot;(dpsim)&amp;hellip;&amp;quot;&lt;/em>.
In case it is not activated, run:&lt;/p>
&lt;pre>&lt;code>$ activate dpsim
&lt;/code>&lt;/pre>
&lt;h3 id="pip-package-installation">Pip Package Installation&lt;/h3>
&lt;p>Then, DPsim can be installed as a Python module:&lt;/p>
&lt;pre>&lt;code>$ pip install dpsim
&lt;/code>&lt;/pre>
&lt;h2 id="from-source">From Source&lt;/h2>
&lt;p>To build and install DPsim from the source files, please refer to the build section.&lt;/p></description></item><item><title>Docs: Real-Time</title><link>https://sogno-platform.github.io/dpsim/docs/getting-started/real-time/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://sogno-platform.github.io/dpsim/docs/getting-started/real-time/</guid><description>
&lt;p>This page describes recommended techniques to optimize the host operating system for real-time execution of DPsim.&lt;/p>
&lt;p>In principle, real-time execution is supported on all platforms.
However, we recommend to use an optimized Linux installation.&lt;/p>
&lt;h2 id="operating-system-and-kernel">Operating System and Kernel&lt;/h2>
&lt;p>For minimum latency several kernel and driver settings can be optimized.&lt;/p>
&lt;p>To get started, we recommend the &lt;a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/2/html/Realtime_Tuning_Guide/index.html">Redhat Real-time Tuning Guide&lt;/a>.&lt;/p>
&lt;p>A &lt;a href="https://rt.wiki.kernel.org/index.php/Main_Page">PREEMPT_RT patched Linux&lt;/a> kernel is recommended.
Precompiled kernels for Fedora can be found here: &lt;a href="http://ccrma.stanford.edu/planetccrma/software/">http://ccrma.stanford.edu/planetccrma/software/&lt;/a>&lt;/p>
&lt;p>Use the &lt;em>tuned&lt;/em> tool for improving general real-time performance.
Please adjust the setting &lt;code>isolated_cpucores&lt;/code> according to your hardware and enable the &lt;code>realtime&lt;/code> profile as follows:&lt;/p>
&lt;pre>&lt;code> $ dnf install tuned-profiles-realtime
$ echo &amp;quot;realtime&amp;quot; &amp;gt; /etc/tuned/active_profile
$ echo &amp;quot;isolated_cpucores=6-7&amp;quot; &amp;gt;&amp;gt; /etc/tuned/realtime-variables.conf
$ systemctl enable tuned &amp;amp;&amp;amp; systemctl start tuned
$ systemctl reboot
&lt;/code>&lt;/pre>
&lt;h2 id="running-a-real-time-simulation">Running a real-time simulation&lt;/h2>
&lt;p>As a reference, real-time simulation examples are provided in the Examples/Cxx folder of the DPsim repository.&lt;/p>
&lt;p>In order to run a real-time simulation, the simulation process must be started in a special way in order to change the execution priority, scheduler and CPU affinity.
For this purpose the &lt;code>chrt&lt;/code> and &lt;code>taskset&lt;/code> commands are used.
In the following example, we pin the execution of the simulation to CPU cores 6-7 which have been reserved previously by the tuned real-time profile (see above).&lt;/p>
&lt;pre>&lt;code> $ taskset --all-tasks --cpu-list 6-7 \
$ chrt --fifo 99 \
$ Examples/Cxx/RT_DP_CS_R_1
&lt;/code>&lt;/pre>
&lt;p>More details:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://man7.org/linux/man-pages/man1/chrt.1.html">chrt man-page&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://man7.org/linux/man-pages/man1/taskset.1.html">taskset man-page&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="recommended-hardware">Recommended Hardware&lt;/h2>
&lt;p>Some proposals for the selection of appropriate server hardware:&lt;/p>
&lt;ul>
&lt;li>Server-grade CPU, e.g. Intel Xeon. A multi-core system enables true parallel execution of several decoupled systems&lt;/li>
&lt;li>Server-grade network cards, e.g. Intel PRO/1000. These allow offloading of UDP checksumming to the hardware&lt;/li>
&lt;/ul></description></item></channel></rss>